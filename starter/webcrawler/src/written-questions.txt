Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

Answer: Profiler measured total time spent in parsing webpages, and ParallelWebCrawler parsed more web pages.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

Answer: Sequential web crawler is single threaded. and Parellel web crawl is multi threaded. As many of older computers are single threaded, single core processor may          start threads at a time using concurency.but each additional thread requires the one before it to complete its task. Once all tasks are
        completed then the threads are joined. With a single threaded, sequential crawler the time required to run multiple threads
        is not lost.
         The old computer is not multi-core. The cost of parallelism is high and outweighs the benefits (there is extra overhead creating threads pools, workers, and synchronising resources)

   (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

Answer: ParallelWebCrawler performs better with multi-core machines it starts and processes multiple threads at same time.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

 Answer: The cross-cutting concern addressed in Profiler class is profiler implementation classHasMethodsAnnotationWithProfiledAnnotation



    (b) What are the join points of the Profiler in the web crawler program?

 Answer:  CrawlSearchRecursiveAction


.
Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.
    Factory - PageParserFactory
    Proxy -  ProfilerImpl
    Builder - CrawlResult


    Builder -  Usage: CrawlerConfiguration, CrawlResult,PageParser
               Like: Often used to create immutable data objects, Usually supports method chaining.
               Dislike: Lengthy coding.
    Abstract Factory - Usage: PageParserFactoryImp,ParserModule
                       Like: Abstract factory is useful when you want to separate construction of objects into a completely separate Java interface.
		        We can hide construction details from callers.

   Dependency Injection -Usage: ParallelWebCrawler,SequentialWebCrawler,WebCrawlerMain
                Like: Dependency injection takes care of Object creation. It can inject all external dependencies.
                Dislike: Initially difficult until required configurations are set like Apache version 9, class path.

